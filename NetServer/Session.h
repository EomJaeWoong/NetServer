#ifndef __SESSION__H__
#define __SESSION__H__

//--------------------------------------------------------------------------------
// 세션에 대한 정보 구조체
//--------------------------------------------------------------------------------
typedef struct stSessionInfo
{
	SOCKET						_Socket;
	WCHAR						_wIP[16];
	int							_iPort;
} SESSIONINFO;

//--------------------------------------------------------------------------------
// 세션 동기화를 위한 구조체
// 
// IOCount		- 작업 카운트
// ReleaseFlag	- 릴리즈 작업 유무 플래그
//--------------------------------------------------------------------------------
typedef struct stIOBlock
{
	LONG64						_iIOCount;
	LONG64						_iReleaseFlag;
} IOBlock;

//--------------------------------------------------------------------------------
// Session 정의
//--------------------------------------------------------------------------------
typedef struct stSession
{
	/////////////////////////////////////////////
	// Session ID
	/////////////////////////////////////////////
	__int64						_iSessionID;

	/////////////////////////////////////////////
	// 세션 정보(소켓, IP, 포트)
	/////////////////////////////////////////////
	SESSIONINFO					_SessionInfo;

	/////////////////////////////////////////////
	// Overlap struct
	/////////////////////////////////////////////
	OVERLAPPED					_RecvOverlapped;
	OVERLAPPED					_SendOverlapped;

	/////////////////////////////////////////////
	// 송,수신 버퍼
	/////////////////////////////////////////////
	CAyaStreamSQ				_RecvQ;
	CLockfreeQueue<CNPacket *>	_SendQ;

	/////////////////////////////////////////////
	// 세션 동기화 구조체
	/////////////////////////////////////////////
	IOBlock						*_IOBlock;

	/////////////////////////////////////////////
	// Send에 대한 Flag
	/////////////////////////////////////////////
	BOOL						_bSendFlag;

	/////////////////////////////////////////////
	// Send중인 Packet 보관
	/////////////////////////////////////////////
	char *						_pSentPacket[300];
	long						_lSentPacketCnt;

} SESSION;

#endif