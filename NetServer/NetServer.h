#ifndef __NETSERVER__H__
#define __NETSERVER__H__

class CNetServer
{
private :
	enum eNetServer
	{
		// 최대 스레드 갯수
		eMAX_THREAD = 50,

		// 최대 세션 갯수
		eMAX_SESSION = 20000,

		// 최대 WSABUF 갯수
		eMAX_WSABUF = 200
	};


public :
	///////////////////////////////////////////////////////////////////////////////////////////
	// 생성자, 소멸자
	///////////////////////////////////////////////////////////////////////////////////////////
	CNetServer();
	virtual ~CNetServer();



public :
	///////////////////////////////////////////////////////////////////////////////////////////
	// 서버 시작
	///////////////////////////////////////////////////////////////////////////////////////////
	bool						Start(WCHAR* wOpenIP, int iPort, int iWorkerThreadNum, bool bNagle, int iMaxConnect);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 서버 멈춤
	///////////////////////////////////////////////////////////////////////////////////////////
	void						Stop();

	///////////////////////////////////////////////////////////////////////////////////////////
	// 연결 끊기
	///////////////////////////////////////////////////////////////////////////////////////////
	bool						SendPacket(__int64 iSessionID, CNPacket *pPacket);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 연결 끊기
	///////////////////////////////////////////////////////////////////////////////////////////
	bool						Disconnect(__int64 iSessionID);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 소켓 연결 끊기
	///////////////////////////////////////////////////////////////////////////////////////////
	void						CloseSocket(SOCKET socket);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 현재 세션 수
	///////////////////////////////////////////////////////////////////////////////////////////
	int							GetSessionCount(){ return _lSessionCount; }



protected :
	///////////////////////////////////////////////////////////////////////////////////////////
	// 가상 함수들
	// 상속받은 클래스부에서 제작(컨텐츠 부)
	// OnClientJoin			- accept후 접속처리 완료 후 호출
	// OnClientLeave		- Disconnect 후 호출
	// OnConnectionRequest	- accept 직후
	//							return false 시 클라이언트 거부
	//							return true 시 접속 허용
	//
	// OnRecv				- 패킷 수신 완료 후
	// OnSend				- 패킷 송신 완료 후
	//
	// OnWorkerThreadBegin	- 워커스레드 GQCS 바로 하단에서 호출
	// OnWorkerThreadEnd	- 워커스레드 1루프 종료 후
	//
	// OnError				- 에러 전달
	///////////////////////////////////////////////////////////////////////////////////////////
	virtual void				OnClientJoin(SESSIONINFO *pSessionInfo, __int64 iSessionID) = 0;
	virtual void				OnClientLeave(__int64 iSessionID) = 0;
	virtual bool				OnConnectionRequest(SESSIONINFO *pSessionInfo) = 0;

	virtual void				OnRecv(__int64 iSessionID, CNPacket* pPacket) = 0;
	virtual void				OnSend(__int64 iSessionID, int iSendsize) = 0;

	virtual void				OnWorkerThreadBegin() = 0;
	virtual void				OnWorkerThreadEnd() = 0;

	virtual void				OnError(int iErrorCode, WCHAR *wErrorMsg) = 0;



private :
	///////////////////////////////////////////////////////////////////////////////////////////
	// 실제 스레드 부분
	///////////////////////////////////////////////////////////////////////////////////////////
	static unsigned __stdcall	AcceptThread(LPVOID AcceptParam);
	static unsigned __stdcall	WorkerThread(LPVOID WorkerParam);
	static unsigned __stdcall	MonitorThread(LPVOID MonitorParam);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 실제 동작하는 스레드 부분
	///////////////////////////////////////////////////////////////////////////////////////////
	int							AccpetThread_update();
	int							WorkerThread_update();
	int							MonitorThread_update();



private :
	///////////////////////////////////////////////////////////////////////////////////////////
	// Recv, Send 등록
	///////////////////////////////////////////////////////////////////////////////////////////
	void						RecvPost(SESSION *pSession, bool bAcceptRecv = false);
	bool						SendPost(SESSION *pSession);

	///////////////////////////////////////////////////////////////////////////////////////////
	// Recv, Send 처리
	///////////////////////////////////////////////////////////////////////////////////////////
	bool						CompleteRecv(SESSION *pSession, DWORD dwTransferred);
	bool						CompleteSend(SESSION *pSession, DWORD dwTransferred);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 빈 Session Index 관련 함수
	//
	// GetBlankSessionIndex		- 빈칸 인덱스 얻기
	// InsertBlankSessionIndex  - 인덱스 빈칸 반납
	///////////////////////////////////////////////////////////////////////////////////////////
	int							GetBlankSessionIndex();
	void						InsertBlankSessionIndex(int iSessionIndex);

	///////////////////////////////////////////////////////////////////////////////////////////
	// 세션 동기화		 ->		Disconnect, SendPacket
	//
	// 릴리즈 과정을 하나의 작업으로 보고 카운트함
	///////////////////////////////////////////////////////////////////////////////////////////
	SESSION*					SessionGetLock(__int64 SessionID);
	void						SessionGetUnlock(SESSION *pSession);

	///////////////////////////////////////////////////////////////////////////////////////////
	// Disconnection
	///////////////////////////////////////////////////////////////////////////////////////////
	void						DisconnectSession(SESSION *pSession);
	
	///////////////////////////////////////////////////////////////////////////////////////////
	// Release
	///////////////////////////////////////////////////////////////////////////////////////////
	void						ReleaseSession(SESSION *pSession);



public :
	///////////////////////////////////////////////////////////////////////////////////////////
	// 모니터링 변수
	///////////////////////////////////////////////////////////////////////////////////////////
	long						_lAcceptCounter;
	long						_lAcceptTotalCounter;
	long						_lRecvPacketCounter;
	long						_lSendPacketCounter;

	long						_lAcceptTPS;
	long						_lAcceptTotalTPS;
	long						_lRecvPacketTPS;
	long						_lSendPacketTPS;
	long						_lPacketPoolTPS;

	long						_lSessionCount;



private :
	//////////////////////////////////////////////////////////////////////////////////////////
	// IO Completion Port Handle
	//////////////////////////////////////////////////////////////////////////////////////////
	HANDLE						_hIOCP;

	//////////////////////////////////////////////////////////////////////////////////////////
	// Thread Handle
	//////////////////////////////////////////////////////////////////////////////////////////
	HANDLE						_hAcceptThread;
	HANDLE						_hMonitorThread;
	HANDLE						_hWorkerThread[eMAX_THREAD];

	//////////////////////////////////////////////////////////////////////////////////////////
	// LIsten Socket
	//////////////////////////////////////////////////////////////////////////////////////////
	SOCKET						_ListenSocket;

	//////////////////////////////////////////////////////////////////////////////////////////
	// Nagle Option
	//////////////////////////////////////////////////////////////////////////////////////////
	bool						_bNagle;

	//////////////////////////////////////////////////////////////////////////////////////////
	// Thread 갯수
	//////////////////////////////////////////////////////////////////////////////////////////
	int							_iWorkerThreadNum;

	//////////////////////////////////////////////////////////////////////////////////////////
	// Session(Array)
	//////////////////////////////////////////////////////////////////////////////////////////
	SESSION						*_Session[eMAX_SESSION];

	//////////////////////////////////////////////////////////////////////////////////////////
	// 세션 생성시 부여되는 ID value
	//////////////////////////////////////////////////////////////////////////////////////////
	__int64						_iSessionID;

	//////////////////////////////////////////////////////////////////////////////////////////
	// Session Index Stack
	//////////////////////////////////////////////////////////////////////////////////////////
	CLockfreeStack<int>			*_pBlankStack;
};

//////////////////////////////////////////////////////////////////////////////////////////////
// Session Index와 ID 관련 매크로
//
// COMBINE_ID_WITH_INDEX	- ID와 Index 결합
// GET_SESSIONID			- 세션 ID 얻기
// GET_SESSIONINDEX			- 세션 Index 얻기
//////////////////////////////////////////////////////////////////////////////////////////////
#define			COMBINE_ID_WITH_INDEX(ID, INDEX)	((ID << 0x10) | ((short)INDEX))
#define			GET_SESSIONID(ID)					((ID & 0xFFFFFF00) >>0x10)
#define			GET_SESSIONINDEX(ID)				(ID & 0xFF)

#endif